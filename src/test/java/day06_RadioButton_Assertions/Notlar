// Not : BeforeAfter methodunda testleri farklı sayfalarda açıp kapatıyor, BeforeAfterCLass methodlarında aynı sayfada açıp sonra kapatıyor.
    // BeforeAfter methodunda methodların static yapmaya gerek yok ama BeforeAfterCLass'da static yapmak zorunlu.
    /*
    1. assertEquals
    assertEquals , beklenen sonucu gerçek sonuç ile karşılaştırmak için kullanılır. Beklenen sonuç ile gerçek sonuç eşit değil ise gerçekleştirilen test senaryosu sonucunda assertionError hatası fırlatır.
    2. assertTrue
    assertTrue, beklenen bir sonucun true olduğunun kabul edilmesi gerektiği zaman kullanılır. Parametre olarak iki değer alır. İlk parametre de bir mesaj gönderilir ikinci parametrede ise gönderilen mesajın doğruluğu için koşul belirlenir.
    3. assertFalse
    assertFalse, beklenen bir sonucun false olması durumunda kullanılır. İki parametre alır. Parametrelerden biri mesajdır diğeri ise koşuldur. assertFalse ile koşul yerine getirilmez ise assertionError hatası fırlatır.
    4.assertNull
    assertNull, beklenen bir sonucun null olup olmadığı kontrol edilmesi için kullanılır. Bir nesneyi parametre olarak alır ve nesne null değil ise assertionError hatası fırlatır.
    5.assertNotNull
    assertNotNull, beklenen bir sonucun null olmadığını doğrulamak için kullanılır. Bir nesneyi parametre olarak alır ve nesne null ise assertionError hatası fırlatır.
    6.assertSame
    assertSame, parametre olarak verilen iki nesnenin aynı nesneye karşılık gelip gelmediğini kontrol eder. Eğer nesneler aynı nesneyi karşılamıyor ise assertionError hatası fırlatır.
    7.assertNotSame
    assertNotSame, parametre olarak verilen iki nesnenin birbirine eşit olmadığı kontrolünü eder. Eğer aynı nesneye karşılık geliyor ise assertionError hatası fırlatır.
    8.assertArrayEquals
    assertArrayEquals, parametre olarak verilen iki dizinin eşit olup olmadığını kontrol eder. Her iki dizi içinde null değeri var ise bunlar eşit olarak kabul edilir. Eğer eşit değil ise assertionError hatası fırlatır.
*/

/*
dogru oldugunu biliyorsak ==>Assert.assertTrue
yanlis oldugunu biliyorsak ==>Assert.assertFalse
yaparak karar veriyoruz
*/

/*
===equals ile karar verecek isek===
dogru ise ==>Assert.assertEquals
yanlis ise ==>Assert.assertNotEquals
yaparak karar veriyoruz
 */

 //@Test1, @Test2.. diye gidince sırasıyla calıstırır
 //@Testlerin basına static konulmaz



 1. JUnit Assertions Ne İçin Kullanılır ?
 JUnit Assertions Kullanımı yazmış olduğumuz test senaryosunun sonunda elde edilen sonuç ile
 beklenilen sonuçların karşılaştırılması yapılması için kullanılır. Bir test senaryosundan
 beklenen sonuç ile elde edilmiş olan sonuç aynı ise test başarılı olarak nitelendirilir.
 Örneğin yazılan testler koşturma sırasında 3 test senaryosu geçti ve 2 test senaryosu
 doğru şekilde testten geçemediyse başarılı bir sonuç elde etmiş olmuyoruz.
 Assertions kullanımında birebir aynı sonuçların gelmesini beklememiz gerekmektedir.
 2. JUnit Assertions Koşulları Nelerdir ?
 Testlerde kabul edilen iki tür assertions vardır. Bunlardan biri Hard Assertions diğeri ise
 Soft Assertions’dır. Adından da anlaşılacağı gibi Hard Assertions ; test senaryosu içerisinde
 geçen onaylama koşulu gerçekleştirilmeden bir sonraki test adımına geçilmez.
 Bunun için bir otomasyonda bir exception attırılır. Exception atıldığında test durumu
 başarısız olarak sonuçlandırılır.Soft Assertions ise test senaryosu içerisinde bir onaylama
 koşulu gerçekleştirilmese bile test adımına devam eder ve herhangi bir exception atmaz ve
 bir sonraki test senaryosu adımı ile devam eder.